security:
    enable_authenticator_manager: true
    
    # üîê HI√âRARCHIE DE R√îLES MILITAIRE
    role_hierarchy:
        ROLE_USER:           []
        ROLE_ANALYST:        [ROLE_USER]
        ROLE_SYSTEM:         [ROLE_USER]
        ROLE_ADMIN:          [ROLE_USER, ROLE_SYSTEM, ROLE_ANALYST]
        ROLE_SUPER_ADMIN:    [ROLE_ADMIN]
        ROLE_SECURITY:       [ROLE_SUPER_ADMIN] # üéØ R√¥le supr√™me pour security-api
    
    # üîí CHIFFREMENT SODIUM ULTRA-S√âCURIS√â
    password_hashers:
        SecurityApi\Domain\Entity\User:
            algorithm: 'sodium'
            memory_cost: 65536      # 64 MB (maximum)
            time_cost: 4            # 4 iterations
            migrate_from: ['bcrypt'] # Migration depuis bcrypt
    
    # üë• PROVIDERS D'AUTHENTIFICATION
    providers:
        # Provider principal pour utilisateurs de la base
        security_users:
            entity:
                class: SecurityApi\Domain\Entity\User
                property: email
                
        # Provider pour API Keys (JWT + API Key combo)
        api_key_provider:
            id: SecurityApi\Infrastructure\Security\ApiKeyUserProvider
            
        # Provider pour JWT uniquement
        jwt_provider:
            id: SecurityApi\Infrastructure\Security\JwtUserProvider
            
        # Chain provider pour authentification multiple
        chain_provider:
            chain:
                providers: [jwt_provider, api_key_provider, security_users]
    
    # üõ°Ô∏è FIREWALLS ULTRA-S√âCURIS√âS
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        # üìä Endpoints de monitoring (sans auth mais avec rate limiting)
        monitoring:
            pattern: ^/api/(health|metrics|ready|live)
            security: false
            # ‚úÖ Rate limiting m√™me sur endpoints publics
            rate_limiter:
                - health_check_limiter
        
        # üîê API v1 - Authentification principale
        api_v1:
            pattern: ^/api/v1
            stateless: true
            provider: chain_provider
            
            # üéØ AUTHENTIFICATEURS MULTIPLES
            custom_authenticators:
                - SecurityApi\Infrastructure\Security\JwtAuthenticator
                - SecurityApi\Infrastructure\Security\ApiKeyAuthenticator
                - SecurityApi\Infrastructure\Security\MfaAuthenticator
            
            entry_point: SecurityApi\Infrastructure\Security\JwtAuthenticator
            
            # üö´ PROTECTION ANTI-BRUTE FORCE MILITAIRE
            login_throttling:
                max_attempts: 3          # üî• 3 tentatives max (vs 5)
                interval: '1 hour'       # üî• Blocage 1h (vs 30min)
                lock_factory: 'lock.redis.factory'
            
            # üìù HANDLERS S√âCURIT√â AVANC√âS
            failure_handler: SecurityApi\Infrastructure\Security\AuthenticationFailureHandler
            success_handler: SecurityApi\Infrastructure\Security\AuthenticationSuccessHandler
            
        # üîí Admin API - Acc√®s ultra-restreint
        admin_api:
            pattern: ^/api/admin
            stateless: true
            provider: security_users
            
            custom_authenticators:
                - SecurityApi\Infrastructure\Security\AdminAuthenticator
                
            # üéØ RESTRICTIONS IP POUR ADMIN
            access_control:
                - { path: ^/api/admin, roles: ROLE_SECURITY, ips: ['127.0.0.1', '::1'] }
    
    # üõ°Ô∏è CONTR√îLES D'ACC√àS GRANULAIRES
    access_control:
        # Health checks publics
        - { path: ^/api/(health|metrics|ready|live), roles: PUBLIC_ACCESS }
        
        # Authentification - acc√®s public
        - { path: ^/api/v1/auth/(login|refresh), roles: PUBLIC_ACCESS }
        
        # Gestion des tokens - utilisateurs authentifi√©s
        - { path: ^/api/v1/auth/(logout|revoke|me), roles: ROLE_USER }
        
        # Gestion API Keys - utilisateurs confirm√©s
        - { path: ^/api/v1/auth/api-key, roles: ROLE_ANALYST }
        
        # MFA - utilisateurs avanc√©s
        - { path: ^/api/v1/auth/mfa, roles: ROLE_USER }
        
        # Gestion utilisateurs - admins
        - { path: ^/api/v1/users, roles: ROLE_ADMIN }
        
        # Audit et logs - s√©curit√© uniquement
        - { path: ^/api/v1/audit, roles: ROLE_SECURITY }
        - { path: ^/api/v1/logs, roles: ROLE_SECURITY }
        
        # Configuration s√©curit√© - s√©curit√© uniquement
        - { path: ^/api/v1/security, roles: ROLE_SECURITY }
        
        # Admin API - ULTRA-RESTREINT
        - { path: ^/api/admin, roles: ROLE_SECURITY, requires_channel: https }
        
        # Par d√©faut - authentification requise
        - { path: ^/api, roles: ROLE_USER }
    
    # üîê CONFIGURATION SUPPL√âMENTAIRE
    remember_me:
        secret: '%env(SECURITY_REMEMBER_ME_SECRET)%'
        lifetime: 604800 # 7 jours
        path: /
        domain: '%env(APP_DOMAIN)%'
        secure: true     # HTTPS uniquement
        httponly: true   # JavaScript interdit
        samesite: 'strict'
    
    # üéØ LOGOUT S√âCURIS√â
    logout:
        path: /api/v1/auth/logout
        target: /
        invalidate_session: true
        clear_site_data: ['cache', 'cookies', 'storage'] 